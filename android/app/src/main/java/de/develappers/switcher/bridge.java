// Autogenerated from Pigeon (v4.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package de.develappers.switcher;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class bridge {

  /**
   * Generated class from Pigeon that represents data sent in messages.
   */

  public static class HistoryEntry {
    private @NonNull HashMap<String, Object> state;

    public @NonNull HashMap<String, Object> getState() {
      return state;
    }

    public void setState(@NonNull HashMap<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private HistoryEntry() {
    }

    public static final class Builder {
      private @Nullable HashMap<String, Object> state;

      public @NonNull Builder setState(@NonNull HashMap<String, Object> setterArg) {
        this.state = setterArg;
        return this;
      }
      public @NonNull HistoryEntry build() {
        HistoryEntry pigeonReturn = new HistoryEntry();
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("state", state);
      return toMapResult;
    }
    static @NonNull HistoryEntry fromMap(@NonNull Map<String, Object> map) {
      HistoryEntry pigeonResult = new HistoryEntry();
      Object state = map.get("state");
      pigeonResult.setState((HashMap<String, Object>)state);
      Object at = map.get("at");
      Object source = map.get("source");
      return pigeonResult;
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FApi {
    private final BinaryMessenger binaryMessenger;
    public FApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }

    /**
     * The codec used by FApi.
     */
    static MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }

    public void currentState(@NonNull String stateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
              new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FApi.currentState", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(stateArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class HApiCodec extends StandardMessageCodec {
    public static final HApiCodec INSTANCE = new HApiCodec();
    private HApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:
          return HistoryEntry.fromMap((Map<String, Object>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);

      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof HistoryEntry) {
        stream.write(128);
        writeValue(stream, ((HistoryEntry) value).toMap());
      } else
      {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HApi {
    void updateState(@NonNull HistoryEntry entry);

    /** The codec used by HApi. */
    static MessageCodec<Object> getCodec() {
      return       HApiCodec.INSTANCE;    }
    /**Sets up an instance of `HApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HApi api) {
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HApi.updateState", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              HistoryEntry entryArg = (HistoryEntry)args.get(0);
              if (entryArg == null) {
                throw new NullPointerException("entryArg unexpectedly null.");
              }
              api.updateState(entryArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
